require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/articles", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Article. As you add validations to Article, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      id: "1000",
      featured: Faker::Boolean.boolean,
      title: Faker::ChuckNorris.fact,
      url: Faker::Internet.url,
      imageUrl: Faker::Avatar.image,
      newsSite: Faker::Internet.url,
      summary: Faker::Lorem.paragraph,
      publishedAt: Faker::Date.between(from: 2.year.ago, to: Date.today),
      events: [],
      launches: [],
    }
  }

  let(:invalid_attributes) {
    {
      featured: Faker::Boolean.boolean,
      title: nil,
      url: Faker::Internet.url,
      imageUrl: Faker::Avatar.image,
      newsSite: Faker::Internet.url,
      summary: Faker::Lorem.paragraph,
      publishedAt: Faker::Date.between(from: 2.year.ago, to: Date.today)
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ArticlesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "have http status equals 200 ok" do
      Article.create! valid_attributes
      get articles_url, headers: valid_headers, as: :json
      expect(response).to have_http_status(:ok)
      expect(response.body).to include('events')
      expect(response.body).to include('launches')
    end
  end

  describe "GET /show" do
    it "have http status equals 200 ok" do
      article = Article.create! valid_attributes
      get article_url(article), as: :json
      expect(response).to have_http_status(:ok)
      expect(response.body).to include('events')
      expect(response.body).to include('launches')
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Article" do
        expect {
          post articles_url,
               params: { article: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Article, :count).by(1)
        expect(response).to have_http_status(:created)
      end

      it "renders a JSON response with the new article" do
        post articles_url,
             params: { article: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end

      it "Should apply origin_id equals id field request" do
        post articles_url, params: { article: valid_attributes }, headers: valid_headers, as: :json
        origin_id = JSON.parse(response.body)['origin_id']
        expect(request.params[:article][:id]).to eq(origin_id)
      end

      it 'Should create article with events' do
        attributes = valid_attributes
        attributes[:events] = [
          {
            "id": "b4cb5f4f-247d-4a14-918a-a2e56f46289e",
            "provider": "Event Library 2"
          }
        ]
        post articles_url, params: { article: attributes }, headers: valid_headers, as: :json
        events = JSON.parse(response.body)['events']
        
        expect(events.length()).to eq(1)
        expect(events[0]['origin_id']).to eq('b4cb5f4f-247d-4a14-918a-a2e56f46289e')
      end

      it 'Should create article with launches' do
        attributes = valid_attributes
        attributes[:launches] = [
          {
            "id": "b4cb5f4f-247d-4a14-918a-a2e56f46289e",
            "provider": "Launche Library 2"
          }
        ]
        post articles_url, params: { article: attributes }, headers: valid_headers, as: :json
        launches = JSON.parse(response.body)['launches']
        
        expect(launches.length()).to eq(1)
        expect(launches[0]['origin_id']).to eq('b4cb5f4f-247d-4a14-918a-a2e56f46289e')
      end
      
    end

    context "with invalid parameters" do
      it "does not create a new Article" do
        expect {
          post articles_url,
               params: { article: invalid_attributes }, as: :json
        }.to change(Article, :count).by(0)
      end

      it "renders a JSON response with errors for the new article" do
        post articles_url,
             params: { article: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          featured: Faker::Boolean.boolean,
          title: "Space Flight News 2021",
          url: Faker::Internet.url,
          imageUrl: Faker::Avatar.image,
          newsSite: Faker::Internet.url,
          summary: Faker::Lorem.paragraph,
          publishedAt: Faker::Date.between(from: 2.year.ago, to: Date.today)
        }
      }

      it "updates the requested article" do
        article = Article.create! valid_attributes
        patch article_url(article),
              params: { article: new_attributes }, headers: valid_headers, as: :json
        article.reload
        expect(article.title).to eq("Space Flight News 2021")
      end

      it "renders a JSON response with the article" do
        article = Article.create! valid_attributes
        patch article_url(article),
              params: { article: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json; charset=utf-8"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the article" do
        article = Article.create! valid_attributes
        patch article_url(article),
              params: { article: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested article" do
      article = Article.create! valid_attributes
      expect {
        delete article_url(article), headers: valid_headers, as: :json
      }.to change(Article, :count).by(-1)
    end
  end
end
